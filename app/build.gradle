apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply from: '../androidqualityconfig/quality.gradle'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.itis.android.githubapp"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
    }
    androidExtensions {
        experimental = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    buildTypes.each {
        it.buildConfigField 'String', 'API_ENDPOINT', baseUrl
        it.buildConfigField 'String', 'CLIENT_ID', clientId
        it.buildConfigField 'String', 'CLIENT_SECRET', clientSecret
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin/'
    }
}

ext {
    androidx = "1.1.0"
    anko = "0.10.8"
    arch = "2.2.0"
    coroutines = "1.3.4"
    glide = "4.10.0"
    gson = "2.8.2"
    jupiter = "5.3.2"
    kodein = "5.3.0"
    kotlin_test = "1.1.51"
    mockk = "1.9.3"
    nav_version = "1.0.0"
    okhttp = "3.12.8"
    okhttp3downloader = "1.1.0"
    picasso = "2.5.2"
    retrofit = "2.4.0"
    room = "2.2.5"
    stetho = "1.5.1"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    // Support
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "com.google.android.material:material:1.3.0"
    implementation "androidx.recyclerview:recyclerview:$androidx"
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$arch"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$arch"
    kapt "androidx.lifecycle:lifecycle-compiler:$arch"
    // Navigation
    implementation "android.arch.navigation:navigation-fragment-ktx:$nav_version"
    implementation "android.arch.navigation:navigation-ui-ktx:$nav_version"
    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:${retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofit}"
    implementation 'ru.gildor.coroutines:kotlin-coroutines-retrofit:0.13.0-eap13'
    // OkHttp
    implementation "com.squareup.okhttp3:okhttp:${okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${okhttp}"
    // Gson
    implementation "com.google.code.gson:gson:${gson}"
    // Kodein
    implementation "org.kodein.di:kodein-di-generic-jvm:${kodein}"
    implementation "org.kodein.di:kodein-di-framework-android-x:${kodein}"
    // Picasso
    implementation "com.squareup.picasso:picasso:${picasso}"
    implementation "com.jakewharton.picasso:picasso2-okhttp3-downloader:${okhttp3downloader}"
    // Stetho
    implementation "com.facebook.stetho:stetho:${stetho}"
    implementation "com.facebook.stetho:stetho-okhttp3:${stetho}"
    //Anko
    implementation "org.jetbrains.anko:anko:${anko}"
    // Glide
    implementation "com.github.bumptech.glide:glide:${glide}"

    implementation 'com.github.rahatarmanahmed:circularprogressview:2.5.0'

    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'

    implementation 'androidx.constraintlayout:constraintlayout:2.1.0-beta01'

    testImplementation "org.junit.jupiter:junit-jupiter-api:${jupiter}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${jupiter}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jupiter}"

    testImplementation "io.mockk:mockk:${mockk}"
    testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlin_test}"

    testImplementation 'junit:junit:4.12'
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${jupiter}"
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

tasks.withType(Test) {
    testLogging {
        events "started", "passed", "skipped", "failed"
    }
}
